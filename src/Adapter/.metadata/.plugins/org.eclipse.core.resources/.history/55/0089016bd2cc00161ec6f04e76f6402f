/*
 * bluetooth_usart.h
 *
 *  Created on: 2016年12月22日
 *      Author: Topon-Edison
 */

#ifndef DRIVERS_INC_BLUETOOTH_USART_H_
#define DRIVERS_INC_BLUETOOTH_USART_H_
#include <cstdint>

struct  RINGBUFF_T;
struct  LPC_USART_T;
struct  UART_CONFIG_T;
typedef void (*RX_CALLBACK_T)(char);

const int TX_BUFFER_LEN = 100;

enum UART_Type
{
	Bluetooth_UART = 0,
	KWP_UART
};

class UART
{
public:
	static UART * Instance(UART_Type uart_t);
	void  Uart_Init(UART_CONFIG_T* uart_cfg_);
	void Send(uint8_t ch);
	void Send(char * str,uint32_t lenght);
	void Irq_Handle();




private:
	UART(LPC_USART_T* USARTn);      // constructor
	void rx_handler();              // use for transfer
	void tx_handler();              //
	LPC_USART_T* uart_channel_;     // the pointer to the uart
	UART_CONFIG_T uart_cfg_;        // the configuration value of the uart
	char tx_buffer_[TX_BUFFER_LEN]; // the buffer for ringbuffer  data
	RINGBUFF_T  ring_buffer_;       // the ringbuffer pointer.
	bool tx_busy_;                  // if the the transmit is in processing or not
	uint32_t tx_index_;             // the index indicate the char will be transfered in tx_bufeer_
	uint32_t tx_len_;               // the length of the data need be transmit.
	RX_CALLBACK_T rx_callback_;










};



#endif /* DRIVERS_INC_BLUETOOTH_USART_H_ */
